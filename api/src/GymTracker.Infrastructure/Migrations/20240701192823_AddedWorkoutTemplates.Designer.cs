// <auto-generated />
using System;
using GymTracker.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GymTracker.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240701192823_AddedWorkoutTemplates")]
    partial class AddedWorkoutTemplates
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GymTracker.Core.Entities.Exercise", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("WorkoutId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("WorkoutId");

                    b.ToTable("Exercises");
                });

            modelBuilder.Entity("GymTracker.Core.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("GymTracker.Core.Entities.Series", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ExerciseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RPE")
                        .HasColumnType("int");

                    b.Property<int>("Repetitions")
                        .HasColumnType("int");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ExerciseId");

                    b.ToTable("Series");
                });

            modelBuilder.Entity("GymTracker.Core.Entities.TemplateExercise", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ExerciseName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastSetIntensity")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Reps")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Rest")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Rpe")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Substitution1")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Substitution2")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("TemplateWorkoutId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("WarmupSets")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("WorkingSets")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("TemplateWorkoutId");

                    b.ToTable("TemplateExercises");
                });

            modelBuilder.Entity("GymTracker.Core.Entities.TemplateWeek", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("WeekNumber")
                        .HasColumnType("int");

                    b.Property<Guid>("WorkoutTemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("WorkoutTemplateId");

                    b.ToTable("TemplateWeeks");
                });

            modelBuilder.Entity("GymTracker.Core.Entities.TemplateWorkout", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("TemplateWeekId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TemplateWeekId");

                    b.ToTable("TemplateWorkouts");
                });

            modelBuilder.Entity("GymTracker.Core.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("GymTracker.Core.Entities.UserExerciseProgress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CompletionDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Set1Reps")
                        .HasColumnType("int");

                    b.Property<int?>("Set2Reps")
                        .HasColumnType("int");

                    b.Property<int?>("Set3Reps")
                        .HasColumnType("int");

                    b.Property<int?>("Set4Reps")
                        .HasColumnType("int");

                    b.Property<Guid>("TemplateExerciseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserWorkoutTemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("WorkoutCompleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("TemplateExerciseId");

                    b.HasIndex("UserWorkoutTemplateId");

                    b.ToTable("UserExerciseProgresses");
                });

            modelBuilder.Entity("GymTracker.Core.Entities.UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("GymTracker.Core.Entities.UserWorkoutTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WorkoutTemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("WorkoutTemplateId");

                    b.ToTable("UserWorkoutTemplates");
                });

            modelBuilder.Entity("GymTracker.Core.Entities.Workout", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Workouts");
                });

            modelBuilder.Entity("GymTracker.Core.Entities.WorkoutTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("DurationWeeks")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("WorkoutTemplates");
                });

            modelBuilder.Entity("GymTracker.Core.Entities.Exercise", b =>
                {
                    b.HasOne("GymTracker.Core.Entities.Workout", "Workout")
                        .WithMany("Exercises")
                        .HasForeignKey("WorkoutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Workout");
                });

            modelBuilder.Entity("GymTracker.Core.Entities.Series", b =>
                {
                    b.HasOne("GymTracker.Core.Entities.Exercise", "Exercise")
                        .WithMany("Series")
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exercise");
                });

            modelBuilder.Entity("GymTracker.Core.Entities.TemplateExercise", b =>
                {
                    b.HasOne("GymTracker.Core.Entities.TemplateWorkout", "TemplateWorkout")
                        .WithMany("TemplateExercises")
                        .HasForeignKey("TemplateWorkoutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TemplateWorkout");
                });

            modelBuilder.Entity("GymTracker.Core.Entities.TemplateWeek", b =>
                {
                    b.HasOne("GymTracker.Core.Entities.WorkoutTemplate", "WorkoutTemplate")
                        .WithMany("TemplateWeeks")
                        .HasForeignKey("WorkoutTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WorkoutTemplate");
                });

            modelBuilder.Entity("GymTracker.Core.Entities.TemplateWorkout", b =>
                {
                    b.HasOne("GymTracker.Core.Entities.TemplateWeek", "TemplateWeek")
                        .WithMany("TemplateWorkouts")
                        .HasForeignKey("TemplateWeekId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TemplateWeek");
                });

            modelBuilder.Entity("GymTracker.Core.Entities.UserExerciseProgress", b =>
                {
                    b.HasOne("GymTracker.Core.Entities.TemplateExercise", "TemplateExercise")
                        .WithMany()
                        .HasForeignKey("TemplateExerciseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GymTracker.Core.Entities.UserWorkoutTemplate", "UserWorkoutTemplate")
                        .WithMany("UserExerciseProgress")
                        .HasForeignKey("UserWorkoutTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TemplateExercise");

                    b.Navigation("UserWorkoutTemplate");
                });

            modelBuilder.Entity("GymTracker.Core.Entities.UserRole", b =>
                {
                    b.HasOne("GymTracker.Core.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GymTracker.Core.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GymTracker.Core.Entities.UserWorkoutTemplate", b =>
                {
                    b.HasOne("GymTracker.Core.Entities.User", "User")
                        .WithMany("UserWorkoutTemplates")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GymTracker.Core.Entities.WorkoutTemplate", "WorkoutTemplate")
                        .WithMany()
                        .HasForeignKey("WorkoutTemplateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("WorkoutTemplate");
                });

            modelBuilder.Entity("GymTracker.Core.Entities.Workout", b =>
                {
                    b.HasOne("GymTracker.Core.Entities.User", "User")
                        .WithMany("Workouts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("GymTracker.Core.Entities.Exercise", b =>
                {
                    b.Navigation("Series");
                });

            modelBuilder.Entity("GymTracker.Core.Entities.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("GymTracker.Core.Entities.TemplateWeek", b =>
                {
                    b.Navigation("TemplateWorkouts");
                });

            modelBuilder.Entity("GymTracker.Core.Entities.TemplateWorkout", b =>
                {
                    b.Navigation("TemplateExercises");
                });

            modelBuilder.Entity("GymTracker.Core.Entities.User", b =>
                {
                    b.Navigation("UserRoles");

                    b.Navigation("UserWorkoutTemplates");

                    b.Navigation("Workouts");
                });

            modelBuilder.Entity("GymTracker.Core.Entities.UserWorkoutTemplate", b =>
                {
                    b.Navigation("UserExerciseProgress");
                });

            modelBuilder.Entity("GymTracker.Core.Entities.Workout", b =>
                {
                    b.Navigation("Exercises");
                });

            modelBuilder.Entity("GymTracker.Core.Entities.WorkoutTemplate", b =>
                {
                    b.Navigation("TemplateWeeks");
                });
#pragma warning restore 612, 618
        }
    }
}
